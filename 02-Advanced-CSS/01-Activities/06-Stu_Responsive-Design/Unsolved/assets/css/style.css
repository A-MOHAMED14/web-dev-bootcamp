* {
  box-sizing: border-box;
}

body {
  font-family: Arial;
  margin: 0;
}

header {
  padding: 40px;
  text-align: center;
  background: #13293d;
  color: #fff;
}

/* 
Q: What happens when we set the display property to flex? 
A: The container becomes a flex container and its children become flex items enabling a flexible layout and easy alignment of the flex items. 
*/
nav {
  display: flex;
  background-color: #d8a47f;
}

nav a {
  color: #13293d;
  padding: 14px 20px;
  text-decoration: none;
  text-align: center;
}

/* 
Q: What is the flex-wrap property? 
A: It is a property in Flexbox that controls whether the flex items are forced onto a single line or can wrap onto multiple lines within the flex container when they cannot fit in one line.
*/
main {
  display: flex;
  flex-wrap: wrap;
}

aside {
  flex: 1;
  background-color: #b9c6ae;
  padding: 80px;
  text-align: center;
}


footer {
  padding: 20px;
  text-align: center;
  background: #13293d;
  color: #fff;
}

/* 
Q: What does the justify-content property do? 
A: Align flex items along the main axis of the flex container (in this case, the flex items are the cards).
*/
.products {
  flex: 4;
  background-color: #fff;
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

/* 
Q: What is the flex property a shorthand property for?
A: flex-grow : flex-shrink : flex-basis

Q:What is it doing here? 
A: Sets grow & shrink to 0, therefore, the cards are not growable or shrinkable. Also sets the intial length of the card to 400px.
*/
.card {
  border-style: solid;
  border-width: 1px;
  border-radius: 10px;
  padding: 10px;
  flex: 0 0 400px;
}

.card header {
  padding: 20px;
}

.card p {
  text-align: center;
}

.card img {
  width: 100%;
}

/* 
Q: What does the flex-direction property define?
A: Defines the main axis and the direction in which flex items are laid out in a flex container.

Q: What is it doing here?
A: Setting the flex-direction of the flex-items within the flex-containers main & nav to column. Consequently, the flex-items will be laid out in a column, stacking vertically on yop of each other, rather than in a row.
*/
@media screen and (max-width: 768px) {
  main,
  nav {
    flex-direction: column;
  }
}
